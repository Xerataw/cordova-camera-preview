import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var ICameraPreview = /** @class */ (function (_super) {
    __extends(ICameraPreview, _super);
    function ICameraPreview() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.CAMERA_DIRECTION = {
            BACK: 'back',
            FRONT: 'front',
        };
        return _this;
    }
    ICameraPreview.prototype.startCamera = function (options) { return cordova(this, "startCamera", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    ICameraPreview.prototype.stopCamera = function () { return cordova(this, "stopCamera", {}, arguments); };
    ICameraPreview.prototype.hide = function () { return cordova(this, "hide", {}, arguments); };
    ICameraPreview.prototype.show = function () { return cordova(this, "show", {}, arguments); };
    ICameraPreview.prototype.takePicture = function (options) { return cordova(this, "takePicture", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    ICameraPreview.prototype.setZoom = function (zoom) { return cordova(this, "setZoom", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    ICameraPreview.prototype.getMaxZoom = function () { return cordova(this, "getMaxZoom", {}, arguments); };
    ICameraPreview.prototype.setPreviewSize = function (dimensions) { return cordova(this, "setPreviewSize", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    ICameraPreview.prototype.tapToFocus = function (xPoint, yPoint) { return cordova(this, "tapToFocus", {}, arguments); };
    ICameraPreview.prototype.onBackButton = function () { return cordova(this, "onBackButton", {}, arguments); };
    ICameraPreview.prototype.getRectangleDimensions = function () { return cordova(this, "getRectangleDimensions", {}, arguments); };
    ICameraPreview.pluginName = "ICameraPreview";
    ICameraPreview.plugin = "inflexsys-camera-preview";
    ICameraPreview.pluginRef = "cordova.plugins.ICameraPreview";
    ICameraPreview.repo = "";
    ICameraPreview.platforms = ["Android"];
    ICameraPreview.decorators = [
        { type: Injectable }
    ];
    return ICameraPreview;
}(AwesomeCordovaNativePlugin));
export { ICameraPreview };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvaW5mbGV4c3lzLWNhbWVyYS1wcmV2aWV3L25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLHVDQUErQyxNQUFNLCtCQUErQixDQUFDOztJQWlFeEQsa0NBQTBCOzs7UUFFNUQsc0JBQWdCLEdBQUc7WUFDakIsSUFBSSxFQUFFLE1BQU07WUFDWixLQUFLLEVBQUUsT0FBTztTQUNmLENBQUM7OztJQVdGLG9DQUFXLGFBQUMsT0FBNkI7SUFRekMsbUNBQVU7SUFVViw2QkFBSTtJQVVKLDZCQUFJO0lBY0osb0NBQVcsYUFBQyxPQUFxQztJQWNqRCxnQ0FBTyxhQUFDLElBQWE7SUFVckIsbUNBQVU7SUFlVix1Q0FBYyxhQUFDLFVBQW9DO0lBWW5ELG1DQUFVLGFBQUMsTUFBYyxFQUFFLE1BQWM7SUFVekMscUNBQVk7SUFVWiwrQ0FBc0I7Ozs7Ozs7Z0JBbEl2QixVQUFVOzt5QkFqRVg7RUFrRW9DLDBCQUEwQjtTQUFqRCxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBQbHVnaW4sIENvcmRvdmEsIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2NvcmUnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBDYW1lcmFQcmV2aWV3RGltZW5zaW9ucyB7XHJcbiAgLyoqIFRoZSB3aWR0aCBvZiB0aGUgY2FtZXJhIHByZXZpZXcsIGRlZmF1bHQgdG8gd2luZG93LnNjcmVlbi53aWR0aCAqL1xyXG4gIHdpZHRoPzogbnVtYmVyO1xyXG5cclxuICAvKiogVGhlIGhlaWdodCBvZiB0aGUgY2FtZXJhIHByZXZpZXcsIGRlZmF1bHQgdG8gd2luZG93LnNjcmVlbi5oZWlnaHQgKi9cclxuICBoZWlnaHQ/OiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ2FtZXJhUHJldmlld09wdGlvbnMge1xyXG4gIC8qKiBUaGUgbGVmdCBlZGdlIGluIHBpeGVscywgZGVmYXVsdCAwICovXHJcbiAgeD86IG51bWJlcjtcclxuXHJcbiAgLyoqIFRoZSB0b3AgZWRnZSBpbiBwaXhlbHMsIGRlZmF1bHQgMCAqL1xyXG4gIHk/OiBudW1iZXI7XHJcblxyXG4gIC8qKiBUaGUgd2lkdGggaW4gcGl4ZWxzLCBkZWZhdWx0IHdpbmRvdy5zY3JlZW4ud2lkdGggKi9cclxuICB3aWR0aD86IG51bWJlcjtcclxuXHJcbiAgLyoqIFRoZSBoZWlnaHQgaW4gcGl4ZWxzLCBkZWZhdWx0IHdpbmRvdy5zY3JlZW4uaGVpZ2h0ICovXHJcbiAgaGVpZ2h0PzogbnVtYmVyO1xyXG5cclxuICAvKiogQ2hvb3NlIHRoZSBjYW1lcmEgdG8gdXNlICdmcm9udCcgb3IgJ3JlYXInLCBkZWZhdWx0ICdmcm9udCcgKi9cclxuICBjYW1lcmE/OiBzdHJpbmc7XHJcblxyXG4gIC8qKiBUYXAgdG8gdGFrZSBhIHBob3RvLCBkZWZhdWx0IHRydWUgKHBpY3R1cmUgcXVhbGl0eSBieSBkZWZhdWx0IDogODUpICovXHJcbiAgdGFwUGhvdG8/OiBib29sZWFuO1xyXG5cclxuICAvKiogUHJldmlldyBib3ggZHJhZyBhY3Jvc3MgdGhlIHNjcmVlbiwgZGVmYXVsdCAnZmFsc2UnICovXHJcbiAgcHJldmlld0RyYWc/OiBib29sZWFuO1xyXG5cclxuICAvKiogQ2FwdHVyZSBpbWFnZXMgdG8gYSBmaWxlIGFuZCByZXR1cm4gYmFjayB0aGUgZmlsZSBwYXRoIGluc3RlYWQgb2YgcmV0dXJuaW5nIGJhc2U2NCBlbmNvZGVkIGRhdGEuICovXHJcbiAgc3RvcmVUb0ZpbGU6IGJvb2xlYW47XHJcblxyXG4gIC8qKiBQcmV2aWV3IGJveCB0byB0aGUgYmFjayBvZiB0aGUgd2VidmlldyAodHJ1ZSA9PiBiYWNrLCBmYWxzZSA9PiBmcm9udCkgLCBkZWZhdWx0IGZhbHNlICovXHJcbiAgdG9CYWNrPzogYm9vbGVhbjtcclxuXHJcbiAgLyoqIEFscGhhIGNoYW5uZWwgb2YgdGhlIHByZXZpZXcgYm94LCBmbG9hdCwgWzAsMV0sIGRlZmF1bHQgMSAqL1xyXG4gIGFscGhhPzogbnVtYmVyO1xyXG5cclxuICAvKiogVGFwIHRvIHNldCBzcGVjaWZpYyBmb2N1cyBwb2ludC4gTm90ZSwgdGhpcyBhc3N1bWVzIHRoZSBjYW1lcmEgaXMgZnVsbC1zY3JlZW4uIGRlZmF1bHQgZmFsc2UgKi9cclxuICB0YXBGb2N1cz86IGJvb2xlYW47XHJcblxyXG4gIC8qKiBPbiBBbmRyb2lkIGRpc2FibGUgYXV0b21hdGljIHJvdGF0aW9uIG9mIHRoZSBpbWFnZSBhbmQgc3RyaXBwaW5nIG9mIEV4aXQgaGVhZGVyLiBkZWZhdWx0IGZhbHNlICovXHJcbiAgZGlzYWJsZUV4aWZIZWFkZXJTdHJpcHBpbmc/OiBib29sZWFuO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENhbWVyYVByZXZpZXdQaWN0dXJlT3B0aW9ucyB7XHJcbiAgLyoqIFRoZSB3aWR0aCBpbiBwaXhlbHMsIGRlZmF1bHQgMCAqL1xyXG4gIHdpZHRoPzogbnVtYmVyO1xyXG4gIC8qKiBUaGUgaGVpZ2h0IGluIHBpeGVscywgZGVmYXVsdCAwICovXHJcbiAgaGVpZ2h0PzogbnVtYmVyO1xyXG4gIC8qKiBUaGUgcGljdHVyZSBxdWFsaXR5LCAwIC0gMTAwLCBkZWZhdWx0IDg1ICovXHJcbiAgcXVhbGl0eT86IG51bWJlcjtcclxufVxyXG5cclxuQFBsdWdpbih7XHJcbiAgcGx1Z2luTmFtZTogJ0lDYW1lcmFQcmV2aWV3JyxcclxuICBwbHVnaW46ICdpbmZsZXhzeXMtY2FtZXJhLXByZXZpZXcnLFxyXG4gIHBsdWdpblJlZjogJ2NvcmRvdmEucGx1Z2lucy5JQ2FtZXJhUHJldmlldycsXHJcbiAgcmVwbzogJycsXHJcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnXVxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBJQ2FtZXJhUHJldmlldyBleHRlbmRzIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIHtcclxuXHJcbiAgQ0FNRVJBX0RJUkVDVElPTiA9IHtcclxuICAgIEJBQ0s6ICdiYWNrJyxcclxuICAgIEZST05UOiAnZnJvbnQnLFxyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqICBTdGFydHMgdGUgY2FtZXJhIHByZXZpZXdcclxuICAgKiBAcGFyYW0gb3B0aW9ucyBcclxuICAgKiBAcmV0dXJucyBcclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBzdWNjZXNzSW5kZXg6IDEsXHJcbiAgICBlcnJvckluZGV4OiAyLFxyXG4gIH0pXHJcbiAgc3RhcnRDYW1lcmEob3B0aW9uczogQ2FtZXJhUHJldmlld09wdGlvbnMpOiBQcm9taXNlPGFueT4geyByZXR1cm47IH1cclxuXHJcbiAgLyoqXHJcbiAgICogU3RvcHMgdGhlIGNhbWVyYSBwcmV2aWV3IGluc3RhbmNlLiAoaU9TICYgQW5kcm9pZClcclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHN0b3BDYW1lcmEoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEhpZGUgdGhlIGNhbWVyYSBwcmV2aWV3IGJveC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGhpZGUoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNob3cgdGhlIGNhbWVyYSBwcmV2aWV3IGJveC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHNob3coKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFRha2UgdGhlIHBpY3R1cmUgKGJhc2U2NClcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Q2FtZXJhUHJldmlld1BpY3R1cmVPcHRpb25zfSBbb3B0aW9uc10gc2l6ZSBhbmQgcXVhbGl0eSBvZiB0aGUgcGljdHVyZSB0byB0YWtlXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBzdWNjZXNzSW5kZXg6IDEsXHJcbiAgICBlcnJvckluZGV4OiAyLFxyXG4gIH0pXHJcbiAgdGFrZVBpY3R1cmUob3B0aW9ucz86IENhbWVyYVByZXZpZXdQaWN0dXJlT3B0aW9ucyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXQgdGhlIHpvb20gKEFuZHJvaWQpXHJcbiAgICpcclxuICAgKiBAcGFyYW0gW3pvb21dIHtudW1iZXJ9IFpvb20gdmFsdWVcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIHN1Y2Nlc3NJbmRleDogMSxcclxuICAgIGVycm9ySW5kZXg6IDIsXHJcbiAgfSlcclxuICBzZXRab29tKHpvb20/OiBudW1iZXIpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IHRoZSBtYXhpbXVtIHpvb20gKEFuZHJvaWQpXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBnZXRNYXhab29tKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogU2V0IHRoZSBwcmV2aWV3IFNpemVcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Q2FtZXJhUHJldmlld0RpbWVuc2lvbnN9IFtkaW1lbnNpb25zXVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgc3VjY2Vzc0luZGV4OiAxLFxyXG4gICAgZXJyb3JJbmRleDogMixcclxuICB9KVxyXG4gIHNldFByZXZpZXdTaXplKGRpbWVuc2lvbnM/OiBDYW1lcmFQcmV2aWV3RGltZW5zaW9ucyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXQgc3BlY2lmaWMgZm9jdXMgcG9pbnQuIE5vdGUsIHRoaXMgYXNzdW1lcyB0aGUgY2FtZXJhIGlzIGZ1bGwtc2NyZWVuLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IHhQb2ludFxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5UG9pbnRcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICB0YXBUb0ZvY3VzKHhQb2ludDogbnVtYmVyLCB5UG9pbnQ6IG51bWJlcik6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBZGQgYSBsaXN0ZW5lciBmb3IgdGhlIGJhY2sgZXZlbnQgZm9yIHRoZSBwcmV2aWV3XHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBpZiBiYWNrIGJ1dHRvbiBwcmVzc2VkXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIG9uQmFja0J1dHRvbigpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogIEdldCB0aGUgdG9wIGFuZCBib3QgbGluZSBvZiB0aGUgYWltIHJlY3RhbmdsZVxyXG4gICAqIFxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGdldFJlY3RhbmdsZURpbWVuc2lvbnMoKTogUHJvbWlzZTxhbnk+IHsgcmV0dXJuOyB9XHJcbn1cclxuIl19